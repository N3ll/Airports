// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace ABS_v2.DataAccess.Context
{
    using ABS_v2.DataAccess.Configuration;
    using ABS_v2.DataAccess.Entities;
    using ABS_v2.DataAccess.Interfaces;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class ABSDbContext : System.Data.Entity.DbContext, IABSDbContext
    {
        public System.Data.Entity.DbSet<Airline> Airlines { get; set; } // Airline
        public System.Data.Entity.DbSet<Airport> Airports { get; set; } // Airport
        public System.Data.Entity.DbSet<Audit> Audits { get; set; } // Audit
        public System.Data.Entity.DbSet<Filter> Filters { get; set; } // Filter
        public System.Data.Entity.DbSet<Flight> Flights { get; set; } // Flight
        public System.Data.Entity.DbSet<FlightSection> FlightSections { get; set; } // FlightSection
        public System.Data.Entity.DbSet<Seat> Seats { get; set; } // Seat
        public System.Data.Entity.DbSet<SectionClass> SectionClasses { get; set; } // SectionClass
        public System.Data.Entity.DbSet<VSystemDetail> VSystemDetails { get; set; } // vSystemDetails

        static ABSDbContext()
        {
            System.Data.Entity.Database.SetInitializer<ABSDbContext>(null);
        }

        public ABSDbContext()
            : base("Name=ABSDb")
        {
        }

        public ABSDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public ABSDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public ABSDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public ABSDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AirlineConfiguration());
            modelBuilder.Configurations.Add(new AirportConfiguration());
            modelBuilder.Configurations.Add(new AuditConfiguration());
            modelBuilder.Configurations.Add(new FilterConfiguration());
            modelBuilder.Configurations.Add(new FlightConfiguration());
            modelBuilder.Configurations.Add(new FlightSectionConfiguration());
            modelBuilder.Configurations.Add(new SeatConfiguration());
            modelBuilder.Configurations.Add(new SectionClassConfiguration());
            modelBuilder.Configurations.Add(new VSystemDetailConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AirlineConfiguration(schema));
            modelBuilder.Configurations.Add(new AirportConfiguration(schema));
            modelBuilder.Configurations.Add(new AuditConfiguration(schema));
            modelBuilder.Configurations.Add(new FilterConfiguration(schema));
            modelBuilder.Configurations.Add(new FlightConfiguration(schema));
            modelBuilder.Configurations.Add(new FlightSectionConfiguration(schema));
            modelBuilder.Configurations.Add(new SeatConfiguration(schema));
            modelBuilder.Configurations.Add(new SectionClassConfiguration(schema));
            modelBuilder.Configurations.Add(new VSystemDetailConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<FindAvailableFlightsReturnModel> FindAvailableFlights(string originAirport, string destinationAirport, System.DateTime? departureDate)
        {
            int procResult;
            return FindAvailableFlights(originAirport, destinationAirport, departureDate, out procResult);
        }

        public System.Collections.Generic.List<FindAvailableFlightsReturnModel> FindAvailableFlights(string originAirport, string destinationAirport, System.DateTime? departureDate, out int procResult)
        {
            var originAirportParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@originAirport", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = originAirport, Size = 3 };
            if (originAirportParam.Value == null)
                originAirportParam.Value = System.DBNull.Value;

            var destinationAirportParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@destinationAirport", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = destinationAirport, Size = 3 };
            if (destinationAirportParam.Value == null)
                destinationAirportParam.Value = System.DBNull.Value;

            var departureDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@departureDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = departureDate.GetValueOrDefault() };
            if (!departureDate.HasValue)
                departureDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<FindAvailableFlightsReturnModel>("EXEC @procResult = [dbo].[FindAvailableFlights] @originAirport, @destinationAirport, @departureDate", originAirportParam, destinationAirportParam, departureDateParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<FindAvailableFlightsReturnModel>> FindAvailableFlightsAsync(string originAirport, string destinationAirport, System.DateTime? departureDate)
        {
            var originAirportParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@originAirport", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = originAirport, Size = 3 };
            if (originAirportParam.Value == null)
                originAirportParam.Value = System.DBNull.Value;

            var destinationAirportParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@destinationAirport", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = destinationAirport, Size = 3 };
            if (destinationAirportParam.Value == null)
                destinationAirportParam.Value = System.DBNull.Value;

            var departureDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@departureDate", SqlDbType = System.Data.SqlDbType.DateTime, Direction = System.Data.ParameterDirection.Input, Value = departureDate.GetValueOrDefault() };
            if (!departureDate.HasValue)
                departureDateParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<FindAvailableFlightsReturnModel>("EXEC [dbo].[FindAvailableFlights] @originAirport, @destinationAirport, @departureDate", originAirportParam, destinationAirportParam, departureDateParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
